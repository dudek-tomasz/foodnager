-- migration: create_enums_and_tables
-- description: creates custom enum types and all core tables for foodnager app
-- tables affected: units, tags, products, user_products, recipes, recipe_ingredients, recipe_tags, cooking_history
-- notes: this migration sets up the complete database schema with all necessary constraints and foreign keys

-- ============================================================================
-- custom enum types
-- ============================================================================

-- difficulty enum for recipe difficulty levels
create type difficulty_enum as enum ('easy', 'medium', 'hard');

-- source enum to track where recipes come from
create type source_enum as enum ('user', 'api', 'ai');

-- ============================================================================
-- dictionary tables
-- ============================================================================

-- units table: stores measurement units for products
create table public.units (
  id bigint primary key generated by default as identity,
  name text not null unique,
  abbreviation text not null unique,
  created_at timestamptz not null default now()
);

comment on table public.units is 'dictionary table storing measurement units (e.g., grams, pieces)';
comment on column public.units.name is 'full unit name (e.g., "gram", "sztuka")';
comment on column public.units.abbreviation is 'unit abbreviation (e.g., "g", "szt.")';

-- enable rls for units table
alter table public.units enable row level security;

-- tags table: stores tags/categories for recipes
create table public.tags (
  id bigint primary key generated by default as identity,
  name text not null unique,
  created_at timestamptz not null default now()
);

comment on table public.tags is 'dictionary table storing recipe tags/categories (e.g., "vegan", "quick meal")';
comment on column public.tags.name is 'tag name for categorizing recipes';

-- enable rls for tags table
alter table public.tags enable row level security;

-- ============================================================================
-- products table
-- ============================================================================

-- products table: central table for both global and user-specific products
create table public.products (
  id bigint primary key generated by default as identity,
  user_id uuid references auth.users(id) on delete set null,
  name text not null,
  created_at timestamptz not null default now()
);

comment on table public.products is 'central products table storing both global (user_id is null) and private products (user_id set)';
comment on column public.products.user_id is 'null for global products, set to user id for private products added by users';
comment on column public.products.name is 'product name - uniqueness validated at api level using lower(name)';

-- enable rls for products table
alter table public.products enable row level security;

-- ============================================================================
-- user_products table (virtual fridge)
-- ============================================================================

-- user_products table: represents each user's "virtual fridge"
create table public.user_products (
  id bigint primary key generated by default as identity,
  user_id uuid not null references auth.users(id) on delete cascade,
  product_id bigint not null references public.products(id) on delete cascade,
  quantity decimal not null check (quantity >= 0),
  unit_id bigint not null references public.units(id),
  expiry_date date,
  created_at timestamptz not null default now()
);

comment on table public.user_products is 'user virtual fridge storing products owned by each user';
comment on column public.user_products.user_id is 'owner of the product in the fridge';
comment on column public.user_products.product_id is 'reference to product in global products table';
comment on column public.user_products.quantity is 'amount of product in fridge, must be non-negative';
comment on column public.user_products.expiry_date is 'optional expiration date for the product';

-- enable rls for user_products table
alter table public.user_products enable row level security;

-- ============================================================================
-- recipes table
-- ============================================================================

-- recipes table: stores all recipes created by users or imported
create table public.recipes (
  id bigint primary key generated by default as identity,
  user_id uuid not null references auth.users(id) on delete cascade,
  title text not null,
  description text,
  instructions text not null,
  cooking_time integer check (cooking_time > 0),
  difficulty difficulty_enum,
  source source_enum not null default 'user',
  metadata jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

comment on table public.recipes is 'main table storing all recipes';
comment on column public.recipes.user_id is 'recipe author/owner';
comment on column public.recipes.title is 'recipe title';
comment on column public.recipes.description is 'short recipe description';
comment on column public.recipes.instructions is 'step-by-step cooking instructions';
comment on column public.recipes.cooking_time is 'preparation time in minutes';
comment on column public.recipes.difficulty is 'difficulty level: easy, medium, or hard';
comment on column public.recipes.source is 'recipe origin: user-created, api-imported, or ai-generated';
comment on column public.recipes.metadata is 'additional metadata (e.g., from external api)';

-- enable rls for recipes table
alter table public.recipes enable row level security;

-- ============================================================================
-- recipe_ingredients table (many-to-many: recipes <-> products)
-- ============================================================================

-- recipe_ingredients table: links recipes with their ingredients
create table public.recipe_ingredients (
  recipe_id bigint not null references public.recipes(id) on delete cascade,
  product_id bigint not null references public.products(id) on delete cascade,
  quantity decimal not null check (quantity > 0),
  unit_id bigint not null references public.units(id),
  primary key (recipe_id, product_id)
);

comment on table public.recipe_ingredients is 'junction table linking recipes with ingredients (products)';
comment on column public.recipe_ingredients.recipe_id is 'reference to the recipe';
comment on column public.recipe_ingredients.product_id is 'reference to the ingredient (product)';
comment on column public.recipe_ingredients.quantity is 'required amount of ingredient, must be positive';
comment on column public.recipe_ingredients.unit_id is 'measurement unit for the ingredient';

-- enable rls for recipe_ingredients table
alter table public.recipe_ingredients enable row level security;

-- ============================================================================
-- recipe_tags table (many-to-many: recipes <-> tags)
-- ============================================================================

-- recipe_tags table: links recipes with their tags
create table public.recipe_tags (
  recipe_id bigint not null references public.recipes(id) on delete cascade,
  tag_id bigint not null references public.tags(id) on delete cascade,
  primary key (recipe_id, tag_id)
);

comment on table public.recipe_tags is 'junction table linking recipes with tags/categories';
comment on column public.recipe_tags.recipe_id is 'reference to the recipe';
comment on column public.recipe_tags.tag_id is 'reference to the tag';

-- enable rls for recipe_tags table
alter table public.recipe_tags enable row level security;

-- ============================================================================
-- cooking_history table
-- ============================================================================

-- cooking_history table: stores user cooking history with fridge state snapshots
create table public.cooking_history (
  id bigint primary key generated by default as identity,
  user_id uuid not null references auth.users(id) on delete cascade,
  recipe_id bigint not null references public.recipes(id) on delete cascade,
  cooked_at timestamptz not null default now(),
  fridge_state_before jsonb not null,
  fridge_state_after jsonb not null
);

comment on table public.cooking_history is 'stores cooking history with before/after fridge state snapshots';
comment on column public.cooking_history.user_id is 'user who cooked the recipe';
comment on column public.cooking_history.recipe_id is 'recipe that was cooked';
comment on column public.cooking_history.cooked_at is 'timestamp when recipe was cooked';
comment on column public.cooking_history.fridge_state_before is 'json snapshot of user fridge before cooking';
comment on column public.cooking_history.fridge_state_after is 'json snapshot of user fridge after cooking';

-- enable rls for cooking_history table
alter table public.cooking_history enable row level security;

